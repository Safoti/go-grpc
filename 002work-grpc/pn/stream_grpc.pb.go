// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: stream.proto

package pn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ISrStreamServiceClient is the client API for ISrStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ISrStreamServiceClient interface {
	// 单项RPC ：单个请求，单个响应
	ISReqSingelrep(ctx context.Context, in *SServerRequest, opts ...grpc.CallOption) (*SClientResponse, error)
	// 服务端流式 ：单个请求，集合响应
	ISReqMultrep(ctx context.Context, in *SServerRequest, opts ...grpc.CallOption) (ISrStreamService_ISReqMultrepClient, error)
	MUISReqMultrep(ctx context.Context, opts ...grpc.CallOption) (ISrStreamService_MUISReqMultrepClient, error)
	// 双向流式 ：集合请求，集合响应
	SMUISReqMultrep(ctx context.Context, opts ...grpc.CallOption) (ISrStreamService_SMUISReqMultrepClient, error)
}

type iSrStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewISrStreamServiceClient(cc grpc.ClientConnInterface) ISrStreamServiceClient {
	return &iSrStreamServiceClient{cc}
}

func (c *iSrStreamServiceClient) ISReqSingelrep(ctx context.Context, in *SServerRequest, opts ...grpc.CallOption) (*SClientResponse, error) {
	out := new(SClientResponse)
	err := c.cc.Invoke(ctx, "/pstream.ISrStreamService/ISReqSingelrep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iSrStreamServiceClient) ISReqMultrep(ctx context.Context, in *SServerRequest, opts ...grpc.CallOption) (ISrStreamService_ISReqMultrepClient, error) {
	stream, err := c.cc.NewStream(ctx, &ISrStreamService_ServiceDesc.Streams[0], "/pstream.ISrStreamService/ISReqMultrep", opts...)
	if err != nil {
		return nil, err
	}
	x := &iSrStreamServiceISReqMultrepClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ISrStreamService_ISReqMultrepClient interface {
	Recv() (*SClientResponse, error)
	grpc.ClientStream
}

type iSrStreamServiceISReqMultrepClient struct {
	grpc.ClientStream
}

func (x *iSrStreamServiceISReqMultrepClient) Recv() (*SClientResponse, error) {
	m := new(SClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iSrStreamServiceClient) MUISReqMultrep(ctx context.Context, opts ...grpc.CallOption) (ISrStreamService_MUISReqMultrepClient, error) {
	stream, err := c.cc.NewStream(ctx, &ISrStreamService_ServiceDesc.Streams[1], "/pstream.ISrStreamService/MUISReqMultrep", opts...)
	if err != nil {
		return nil, err
	}
	x := &iSrStreamServiceMUISReqMultrepClient{stream}
	return x, nil
}

type ISrStreamService_MUISReqMultrepClient interface {
	Send(*SServerRequest) error
	CloseAndRecv() (*SClientResponse, error)
	grpc.ClientStream
}

type iSrStreamServiceMUISReqMultrepClient struct {
	grpc.ClientStream
}

func (x *iSrStreamServiceMUISReqMultrepClient) Send(m *SServerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iSrStreamServiceMUISReqMultrepClient) CloseAndRecv() (*SClientResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iSrStreamServiceClient) SMUISReqMultrep(ctx context.Context, opts ...grpc.CallOption) (ISrStreamService_SMUISReqMultrepClient, error) {
	stream, err := c.cc.NewStream(ctx, &ISrStreamService_ServiceDesc.Streams[2], "/pstream.ISrStreamService/SMUISReqMultrep", opts...)
	if err != nil {
		return nil, err
	}
	x := &iSrStreamServiceSMUISReqMultrepClient{stream}
	return x, nil
}

type ISrStreamService_SMUISReqMultrepClient interface {
	Send(*SServerRequest) error
	Recv() (*SClientResponse, error)
	grpc.ClientStream
}

type iSrStreamServiceSMUISReqMultrepClient struct {
	grpc.ClientStream
}

func (x *iSrStreamServiceSMUISReqMultrepClient) Send(m *SServerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iSrStreamServiceSMUISReqMultrepClient) Recv() (*SClientResponse, error) {
	m := new(SClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ISrStreamServiceServer is the server API for ISrStreamService service.
// All implementations must embed UnimplementedISrStreamServiceServer
// for forward compatibility
	type ISrStreamServiceServer interface {
	// 单项RPC ：单个请求，单个响应
	ISReqSingelrep(context.Context, *SServerRequest) (*SClientResponse, error)
	// 服务端流式 ：单个请求，集合响应
	ISReqMultrep(*SServerRequest, ISrStreamService_ISReqMultrepServer) error
	MUISReqMultrep(ISrStreamService_MUISReqMultrepServer) error
	// 双向流式 ：集合请求，集合响应
	SMUISReqMultrep(ISrStreamService_SMUISReqMultrepServer) error
	mustEmbedUnimplementedISrStreamServiceServer()
}

// UnimplementedISrStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedISrStreamServiceServer struct {
}

func (UnimplementedISrStreamServiceServer) ISReqSingelrep(context.Context, *SServerRequest) (*SClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ISReqSingelrep not implemented")
}
func (UnimplementedISrStreamServiceServer) ISReqMultrep(*SServerRequest, ISrStreamService_ISReqMultrepServer) error {
	return status.Errorf(codes.Unimplemented, "method ISReqMultrep not implemented")
}
func (UnimplementedISrStreamServiceServer) MUISReqMultrep(ISrStreamService_MUISReqMultrepServer) error {
	return status.Errorf(codes.Unimplemented, "method MUISReqMultrep not implemented")
}
func (UnimplementedISrStreamServiceServer) SMUISReqMultrep(ISrStreamService_SMUISReqMultrepServer) error {
	return status.Errorf(codes.Unimplemented, "method SMUISReqMultrep not implemented")
}
func (UnimplementedISrStreamServiceServer) mustEmbedUnimplementedISrStreamServiceServer() {}

// UnsafeISrStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ISrStreamServiceServer will
// result in compilation errors.
type UnsafeISrStreamServiceServer interface {
	mustEmbedUnimplementedISrStreamServiceServer()
}

func RegisterISrStreamServiceServer(s grpc.ServiceRegistrar, srv ISrStreamServiceServer) {
	s.RegisterService(&ISrStreamService_ServiceDesc, srv)
}

func _ISrStreamService_ISReqSingelrep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ISrStreamServiceServer).ISReqSingelrep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstream.ISrStreamService/ISReqSingelrep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ISrStreamServiceServer).ISReqSingelrep(ctx, req.(*SServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ISrStreamService_ISReqMultrep_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ISrStreamServiceServer).ISReqMultrep(m, &iSrStreamServiceISReqMultrepServer{stream})
}

type ISrStreamService_ISReqMultrepServer interface {
	Send(*SClientResponse) error
	grpc.ServerStream
}

type iSrStreamServiceISReqMultrepServer struct {
	grpc.ServerStream
}

func (x *iSrStreamServiceISReqMultrepServer) Send(m *SClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ISrStreamService_MUISReqMultrep_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ISrStreamServiceServer).MUISReqMultrep(&iSrStreamServiceMUISReqMultrepServer{stream})
}

type ISrStreamService_MUISReqMultrepServer interface {
	SendAndClose(*SClientResponse) error
	Recv() (*SServerRequest, error)
	grpc.ServerStream
}

type iSrStreamServiceMUISReqMultrepServer struct {
	grpc.ServerStream
}

func (x *iSrStreamServiceMUISReqMultrepServer) SendAndClose(m *SClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iSrStreamServiceMUISReqMultrepServer) Recv() (*SServerRequest, error) {
	m := new(SServerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ISrStreamService_SMUISReqMultrep_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ISrStreamServiceServer).SMUISReqMultrep(&iSrStreamServiceSMUISReqMultrepServer{stream})
}

type ISrStreamService_SMUISReqMultrepServer interface {
	Send(*SClientResponse) error
	Recv() (*SServerRequest, error)
	grpc.ServerStream
}

type iSrStreamServiceSMUISReqMultrepServer struct {
	grpc.ServerStream
}

func (x *iSrStreamServiceSMUISReqMultrepServer) Send(m *SClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iSrStreamServiceSMUISReqMultrepServer) Recv() (*SServerRequest, error) {
	m := new(SServerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ISrStreamService_ServiceDesc is the grpc.ServiceDesc for ISrStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ISrStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pstream.ISrStreamService",
	HandlerType: (*ISrStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ISReqSingelrep",
			Handler:    _ISrStreamService_ISReqSingelrep_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ISReqMultrep",
			Handler:       _ISrStreamService_ISReqMultrep_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MUISReqMultrep",
			Handler:       _ISrStreamService_MUISReqMultrep_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SMUISReqMultrep",
			Handler:       _ISrStreamService_SMUISReqMultrep_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
